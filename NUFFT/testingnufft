using FastTransforms
using FINUFFT

n = 10
c = complex(rand(n))
x = (collect(0:n-1) + 3rand(n))/n
t = collect(1:n) + 0.5rand(n)

z = nufft2(c, x, eps())
zz = nudft2(c, x)



function nudft2(c::AbstractVector, x::AbstractVector{T}) where {T<:AbstractFloat}
    # Nonuniform discrete Fourier transform of type II

    N = size(x, 1)
    output = zero(c)
    ω = collect(0:N-1)
    for j = 1:N
        #output[j] = dot(exp.(2*T(π)*im*x[j]*ω), c)
        output[j] = dot(exp.(2*pi*im*x[j]*ω), c)
    end

    return output
end

function DFT(p, t)
    n = length(p)
    #t = collect(0:1:(n-1))
    k = collect(0:1:(n-1))
    # if (iseven(n+1))
    #     k = collect(0:1:(n-1)/2)
    # else
    #     k = collect(0:1:(n+1)/2)
    # end
    c = p' * exp.(-2im*pi/n .* t*k')
    #c = p' * exp.(-2im .* t*k')
    c = c'
    return conj(c)
end

function nudft1(c::AbstractVector, ω::AbstractVector{T}) where {T<:AbstractFloat}
    # Nonuniform discrete Fourier transform of type I

    N = size(ω, 1)
    output = zero(c)
    for j = 1:N
        output[j] = dot(exp.(2*T(π)*im*(j-1)/N*ω), c)
    end

    return output
end

ω = collect(0:n-1) + rand(n)

y = nufft1(c, ω, eps())
yy = DFT(c, t)
yyy = nufft1(c, tt, eps())
yyyy = nudft1(c, tt)
y = DFT2(c, tt, 6)

#### yy === yyy === yyyy

tt = t .* (10/(2*pi))


nj = 10
x = pi*(1.0 .- 2.0*rand(nj))
c = rand(nj) + 1im*rand(nj)

# Parameters
ms = 20 # Output size
tol = 1e-10 # Tolerance

# Output as return value
fk = nufft1d1(x, c, 1, tol, ms)
