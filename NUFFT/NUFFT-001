## Author: Patrick Chang
# Script file for the Nonuniform Fast Fourier Transform

using ArgCheck; using FFTW

#---------------------------------------------------------------------------

function NUFFT(cj, xj, M; kwargs...)

    @argcheck size(cj) == size(xj) DimensionMismatch

    nj = size(cj)[1]

    Mr = 2*M
    tau = 12/M^2

    NewGrid = collect(0:(2*pi)/Mr:2*pi-(2*pi)/Mr)
    lrange = collect(-11:1:12)

    Onel = ones(size(lrange)[1], 1)
    Onegrid = ones(size(NewGrid)[1], 1)

    #ftau = zeros(ComplexF64, Mr, nj)
    ftau = zeros(ComplexF64, Mr, 1)

    # for i in 1:nj
    #     ftau[:,i] = sum(cj[i] .* exp.(-(xj[i] .- NewGrid * Onel' .- 2*pi .* Onegrid * lrange').^2 ./ (4*tau)), dims = 2)
    # end

    for i in 1:Mr
        storefj = 0
        for j in 1:nj
            storel = 0
            for k in lrange
                storel = storel + exp(-(xj[j] - NewGrid[i] - 2*pi * k)^2 / (4*tau))
            end
            storefj = storefj + cj[j] * storel
        end
        ftau[i] = storefj
    end

    #ftau = sum(ftau, dims = 2)

    freq = fftfreq(Mr, 1) .* Mr
    pos = findall(abs.(freq) .<= M/2)

    Ftau = fft(ftau)[pos] ./ Mr

    k = freq[pos] #.* Mr

    Fk = sqrt(pi/tau) .* exp.(k.^2 .* tau) .* Ftau

    return Fk
end

nj = 10
x = (collect(0:nj-1) + 0.5 .* rand(nj))
xj = (x .- minimum(x)) .* (2*pi / (maximum(x) - minimum(x)))
cj = rand(nj) + 0im*rand(nj)

freq = fftfreq(Mr, 1) .* Mr
pos = findall(abs.(freq) .<= M/2)
k = freq[pos]

test = (cj' * exp.(1im .* xj * k'))'
test2 = NUFFT(cj, xj, 11)

test - test2

test1 = NUFFT(cj, xj, 11)
test2 = nufft1d1(xj, cj, 1, 1e-12, 11)
