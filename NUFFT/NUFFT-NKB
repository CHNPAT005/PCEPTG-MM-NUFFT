## Author: Patrick Chang
# Script file for the Nonuniform Fast Fourier Transform

# Kaiser-Bessel - naive implementaion

using ArgCheck; using FFTW; using SpecialFunctions

# Supporting functions
#---------------------------------------------------------------------------

function kaiser_bessel(x,n,m,sigma)
    b = pi*(2-1/sigma)
    arg = m^2-n^2*x^2
    if abs(x) < m/n
        y = sinh(b*sqrt(arg))/sqrt(arg)/pi
    elseif abs(x) > m/n
        y = zero(x)
    else
        y = b/pi
    end
    return y
end

function kaiser_bessel_hat(k,n,m,sigma)
    b = pi*(2-1/sigma)
    return besseli(0,m*sqrt(b^2-(2*pi*k/n)^2))
end

#---------------------------------------------------------------------------

# cj = the source strength
# xj = the corresponding time for cj. xj \in [0, 2Ï€]
# M = number of Fourier modes to return:
#   M even returns [-M/2, (M-1)/2]; M odd returns [-M/2, M/2]
# tol = tolerance level for error - controls the spreading

function NUFFTNKB(cj, xj, M, tol; kwargs...)

    @argcheck size(cj) == size(xj) DimensionMismatch

    nj = size(cj)[1]

    R = 2
    Mr = R*M

    nspread = Int(floor((ceil(log(10, 1/tol)) + 1)/2))

    EpsGrid = collect(0:1:Mr-1) ./ Mr .- 0.5

    ftau = zeros(ComplexF64, Mr, 1)

    for i in 1:Mr
        Xi = EpsGrid[i]
        storefj = 0
        for j in 1:nj
            storer = 0
            for r in -nspread:nspread
                storer = storer + kaiser_bessel(xj[j]-Xi+r, Mr, nspread, R)
            end
            storefj = storefj + cj[j] * storer
        end
        ftau[i] = storefj
    end

    freq = fftfreq(Mr, 1) .* Mr
    pos = findall(abs.(freq) .<= M/2)

    Ftau = fft(ftau)[pos]

    k = freq[pos]

    Fk = Ftau ./ kaiser_bessel_hat.(k, Mr, nspread, R)

    return Fk
end

# # Simple test case
#
# nj = 10
# x = (collect(0:nj-1) + 0.5 .* rand(nj))
# xj = (x .- minimum(x)) .* (2*pi / (maximum(x) - minimum(x)))
# cj = rand(nj) + 0im*rand(nj)
# xjj = xj ./ (2*pi) .- 0.5
#
# M = 11
# Mr = 2*M
# freq = fftfreq(Mr, 1) .* Mr
# pos = findall(abs.(freq) .<= M/2)
# k = freq[pos]
#
# test = (cj' * exp.(1im .* xj * k'))'
# test1 = (cj' * exp.(2*pi*1im .* xjj * k'))'
# test2 = NUFFTNKB(cj, xjj, M, 10^-12)
#
# test - test2
