## Author: Patrick Chang
# Script file to benchmark performance between various algorithms
# for the Dirichlet implementaion.
# We compare the Mancino-Sanfelici code to Legacy code and the FFT and NUFFT

using ProgressMeter; using JLD

cd("/Users/patrickchang/Desktop/Stats Masters/Masters Dissertation/Code/PCEPTG-MM-NUFFT")

include("../Correlation Estimators/Dirichlet/CFTcorrDK")
include("../Correlation Estimators/Dirichlet/MScorrDK")
include("../Correlation Estimators/Dirichlet/FFTcorrDK")
include("../Correlation Estimators/Dirichlet/FFTZPcorrDK")
include("../Correlation Estimators/Dirichlet/NUFFTcorrDK-FGG")
include("../Monte Carlo Simulation Algorithms/GBM")

#---------------------------------------------------------------------------
# Timing Functions

function timeCFTcorrDK(nrange, reps)
    result = zeros(reps, length(nrange))
    @showprogress "Computing..." for i in 1:length(nrange)
        P = GBM(Int(nrange[i]), mu, sigma, seed = i)
        t = reshape([collect(1:1:nrange[i]); collect(1:1:nrange[i])], Int(nrange[i]), 2)
        for j in 1:reps
            result[j, i] = @elapsed CFTcorrDK(P, t)
        end
        GC.gc()
    end
    return result
end

function timeMScorrDK(nrange, reps)
    result = zeros(reps, length(nrange))
    @showprogress "Computing..." for i in 1:length(nrange)
        P = GBM(Int(nrange[i]), mu, sigma, seed = i)
        t = reshape([collect(1:1:nrange[i]); collect(1:1:nrange[i])], Int(nrange[i]), 2)
        for j in 1:reps
            result[j, i] = @elapsed MScorrDK(P[:,1], P[:,2], t[:,1], t[:,2])
        end
        GC.gc()
    end
    return result
end

function timeFFTcorrDK(nrange, reps)
    result = zeros(reps, length(nrange))
    @showprogress "Computing..." for i in 1:length(nrange)
        P = GBM(Int(nrange[i]), mu, sigma, seed = i)
        t = reshape([collect(1:1:nrange[i]); collect(1:1:nrange[i])], Int(nrange[i]), 2)
        for j in 1:reps
            result[j, i] = @elapsed FFTcorrDK(P)
        end
        GC.gc()
    end
    return result
end

function timeFFTZPcorrDK(nrange, reps)
    result = zeros(reps, length(nrange))
    @showprogress "Computing..." for i in 1:length(nrange)
        P = GBM(Int(nrange[i]), mu, sigma, seed = i)
        t = reshape([collect(1:1:nrange[i]); collect(1:1:nrange[i])], Int(nrange[i]), 2)
        for j in 1:reps
            result[j, i] = @elapsed FFTZPcorrDK(P, t)
        end
        GC.gc()
    end
    return result
end

function timeNUFFTcorrDKFGG(nrange, reps)
    result = zeros(reps, length(nrange))
    @showprogress "Computing..." for i in 1:length(nrange)
        P = GBM(Int(nrange[i]), mu, sigma, seed = i)
        t = reshape([collect(1:1:nrange[i]); collect(1:1:nrange[i])], Int(nrange[i]), 2)
        for j in 1:reps
            result[j, i] = @elapsed NUFFTcorrDKFGG(P, t)
        end
        GC.gc()
    end
    return result
end

#---------------------------------------------------------------------------
# Obtain and save results

const mu = [0.01/86400, 0.01/86400]
const sigma = [0.1/86400 sqrt(0.1/86400)*0.35*sqrt(0.2/86400);
        sqrt(0.1/86400)*0.35*sqrt(0.2/86400) 0.2/86400]

nrange = [10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0, 2000.0, 5000.0, 10000.0, 20000.0, 50000.0]#, 100000.0]
reps = 10

CFTtimes = timeCFTcorrDK(nrange, reps)
save("Computed Data/ON times/CFTtimesDK.jld", "CFTtimes", CFTtimes)

nrange = [10.0, 20.0, 50.0, 100.0, 200.0, 500.0, 1000.0, 2000.0, 5000.0, 10000.0, 20000.0, 50000.0, 100000.0]
MStimes = timeMScorrDK(nrange, reps)
save("Computed Data/ON times/MStimesDK.jld", "MStimes", MStimes)

FFTtimes = timeFFTcorrDK(nrange, reps)
save("Computed Data/ON times/FFTtimesDK.jld", "FFTtimes", FFTtimes)

FFTZPtimes = timeFFTZPcorrDK(nrange, reps)
save("Computed Data/ON times/FFTZPtimesDK.jld", "FFTZPtimes", FFTZPtimes)

FGGtimes = timeNUFFTcorrDKFGG(nrange, reps)
save("Computed Data/ON times/FGGtimesDK.jld", "FGGtimes", FGGtimes)

#---------------------------------------------------------------------------
# Load and plot results

CFTtimes = load("Computed Data/ON times/CFTtimesDK.jld")
CFTtimes = CFTtimes["CFTtimes"]

MStimes = load("Computed Data/ON times/MStimesDK.jld")
MStimes = MStimes["MStimes"]

FFTtimes = load("Computed Data/ON times/FFTtimesDK.jld")
FFTtimes = FFTtimes["FFTtimes"]

FFTZPtimes = load("Computed Data/ON times/FFTZPtimesDK.jld")
FFTZPtimes = FFTZPtimes["FFTZPtimes"]

FGGtimes = load("Computed Data/ON times/FGGtimesDK.jld")
FGGtimes = FGGtimes["FGGtimes"]

pdat = [minimum(MStimes, dims=1); minimum(FFTtimes, dims=1); minimum(FFTZPtimes, dims=1); minimum(FGGtimes, dims=1)]


p1 = plot(nrange, pdat', label = ["MS" "FFT" "FFTZP" "FGG"])
title!(p1, "Compute Time")
ylabel!(p1, "Time (s)")
xlabel!(p1, "Data Points (n) \n Cutoff N = n/2")
