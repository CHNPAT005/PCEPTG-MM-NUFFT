## Author: Patrick Chang
# Script file for the MM Complex Fourier Transform (Dirichlet)
# Supporting Algorithms are at the start of the script
#  Include:
#           - Scale function to re-scale time to [0, 2 \pi]
# Number of Fourier Coefficients automatically chosen so that events
# are not aliased

#---------------------------------------------------------------------------

### Data Format:
## p1;p2 = vector of stock prices - can include or not include NaNs
## t1;t2 = vector of trading times - can include or not include NaNs
## N = Optional input for cutoff frequency

#---------------------------------------------------------------------------

using ArgCheck; using LinearAlgebra

#---------------------------------------------------------------------------
### Supporting functions

function scaleV2(t1, t2)
    maxt = maximum(filter(!isnan, [t1;t2]))
    mint = minimum(filter(!isnan, [t1;t2]))

    tau1 = (2*pi) .* (t1 .- mint) ./ (maxt - mint)
    tau2 = (2*pi) .* (t2 .- mint) ./ (maxt - mint)
    return tau1, tau2
end

#---------------------------------------------------------------------------

# Mancino Sanfelici implementation using for loops
# with the Dirichlet Kernel

function MScorrDK(p1, p2, t1, t2; kwargs...)
    # clean the data first
    t1 = filter(!isnan, t1)
    t2 = filter(!isnan, t2)

    p1 = filter(!isnan, p1)
    p2 = filter(!isnan, p2)

    # Re-scale trading times
    tau = scaleV2(t1, t2)
    tau1 = tau[1]
    tau2 = tau[2]
    # Computing minimum time change
    # minumum step size to avoid smoothing
    dtau1 = diff(tau1)
    dtau2 = diff(tau2)
    taumin = minimum([dtau1; dtau2])
    taumax = 2*pi
    # Sampling Freq.
    N0 = taumax/taumin

    # Optional Cutoff - if not specified we use Nyquist Cutoff
    kwargs = Dict(kwargs)

    if haskey(kwargs, :N)
        k = kwargs[:N]
    else
        N = trunc(Int, floor(N0/2))
    end

    #------------------------------------------------------
    r1=diff(log.(p1)); r2=diff(log.(p2))

    c_p1=zeros(ComplexF64,2*N+1,1); c_pp1=zeros(ComplexF64,2*N+1,1);
    c_p2=zeros(ComplexF64,2*N+1,1); c_pp2=zeros(ComplexF64,2*N+1,1);
    for k=1:(2*N+1)
        s=k-N-1;
        c_p1[k]=sum(exp.((-1im*s).*tau1[1:(end-1)]).*r1);
        c_pp1[k]=sum(exp.((1im*s).*tau1[1:(end-1)]).*r1);
        c_p2[k]=sum(exp.((-1im*s).*tau2[1:(end-1)]).*r2);
        c_pp2[k]=sum(exp.((1im*s).*tau2[1:(end-1)]).*r2);
    end

    Sigma = zeros(ComplexF64, 2, 2)
    Sigma[1, 1] = sum(c_p1.*c_pp1)/(2*N+1)
    Sigma[1, 2] = sum(c_p1.*c_pp2)/(2*N+1)
    Sigma[2, 1] = Sigma[1, 2]
    Sigma[2, 2] = sum(c_p2.*c_pp2)/(2*N+1)

    Sigma = real(Sigma)
    var = diag(Sigma)
    sigma = sqrt.(var)
    rho = Sigma ./ (sigma * sigma')

    return rho, Sigma, var
end
