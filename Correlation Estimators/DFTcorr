# Author: Patrick Chang
# Script file for the MM Discrete Fourier Transform
# Supporting Algorithms are at the start of the script
#  Include:
#           - Scale function to re-scale time to [0, 2 \pi]
# Number of Fourier Coefficients automatically chosen to match
# a discrete Fourier Transform

#---------------------------------------------------------------------------

### Data Format:
## p = [n x 2] matrix of prices, log returns are computed in the function
# non-trading times are indicated by NaNs
## t = [n x 2] matrix of trading times, non-trading times are indicated by NaNs
# dimensions of p and t must match.

#---------------------------------------------------------------------------

using ArgCheck
using LinearAlgebra

#---------------------------------------------------------------------------
### Supporting functions

function scale(t)
    maxt = maximum(filter(!isnan, t))
    mint = minimum(filter(!isnan, t))

    tau = (2*pi) .* (t .- mint) ./ (maxt - mint)
    return tau
end

function scaleV2(t1, t2)
    maxt = maximum(filter(!isnan, [t1;t2]))
    mint = minimum(filter(!isnan, [t1;t2]))

    tau1 = (2*pi) .* (t1 .- mint) ./ (maxt - mint)
    tau2 = (2*pi) .* (t2 .- mint) ./ (maxt - mint)
    return tau1, tau2
end

#---------------------------------------------------------------------------
## Used for synchronous case only; must match implementaion for FFT
function DFTcorr(p, t; kwargs...)
    ## Pre-allocate arrays and check Data
    np = size(p)[1]
    mp = size(p)[2]
    nt = size(t)[1]

    @argcheck size(p) == size(t) DimensionMismatch

    # Re-scale trading times
    tau = scale(t)
    # Computing minimum time change
    # minumum step size to avoid smoothing
    dtau = diff(filter(!isnan, tau))
    taumin = minimum(filter((x) -> x>0, dtau))
    taumax = 2*pi
    # Sampling Freq.
    N0 = taumax/taumin

    # Optional Cutoff - if not specified we use Nyquist Cutoff
    kwargs = Dict(kwargs)

    if haskey(kwargs, :N)
        k = collect(1:1:kwargs[:N])
    elseif (iseven(np))
        k = collect(1:1:(np-1)/2)
    else
        k = collect(1:1:(np+1)/2)
    end

    Den = length(k)

    #------------------------------------------------------
    e_t_dp_PosComplexExpDiffPrice = zeros(ComplexF64, mp, Den)
    e_t_dp_NegComplexExpDiffPrice = zeros(ComplexF64, mp, Den)
    C0 = zeros(ComplexF64, mp, 1)

    for i in 1:mp
        psii = findall(!isnan, p[:,i])
        P = p[psii, i]
        Time = tau[psii, i]
        DiffP = diff(log.(P))

        C0[i] = sum(DiffP)

        e_t_dp_PosComplexExpDiffPrice[i,:] = DiffP' * exp.(1im * Time[1:(end-1),:] * k')
        e_t_dp_NegComplexExpDiffPrice[i,:] = DiffP' * exp.(-1im * Time[1:(end-1),:] * k')
    end

    c_pos = zeros(ComplexF64, mp, 2*Den + 1)
    c_neg = zeros(ComplexF64, mp, 2*Den + 1)

    c_pos[1,:] = [e_t_dp_NegComplexExpDiffPrice[1,:]; C0[1]; e_t_dp_PosComplexExpDiffPrice[1,:]]
    c_pos[2,:] = [e_t_dp_NegComplexExpDiffPrice[2,:]; C0[2]; e_t_dp_PosComplexExpDiffPrice[2,:]]
    c_neg[1,:] = [e_t_dp_PosComplexExpDiffPrice[1,:]; C0[1]; e_t_dp_NegComplexExpDiffPrice[1,:]]
    c_neg[2,:] = [e_t_dp_PosComplexExpDiffPrice[2,:]; C0[2]; e_t_dp_NegComplexExpDiffPrice[2,:]]

    Sigma = zeros(ComplexF64, mp, mp)

    Sigma[1, 1] = 1 / (2*Den + 1) * (sum(c_pos[1,:] .* c_neg[1,:]))
    Sigma[1, 2] = 1 / (2*Den + 1) * (sum(c_pos[1,:] .* c_neg[2,:]))
    Sigma[2, 1] = Sigma[1, 2]
    Sigma[2, 2] = 1 / (2*Den + 1) * (sum(c_pos[2,:] .* c_neg[2,:]))

    Sigma = real(Sigma)
    var = diag(Sigma)
    sigma = sqrt.(var)
    rho = Sigma ./ (sigma * sigma')

    return rho, Sigma, var
end
