## Author: Patrick Chang
# Script file to test the various Dirichlet implementations
# to ensure they are all self consistent

cd("/Users/patrickchang1/Desktop/Stats Masters/Masters Dissertation/Code/PCEPTG-MM-NUFFT")

using StatsBase; using Random
include("../Correlation Estimators/Dirichlet/CFTcorrDK")
include("../Correlation Estimators/Dirichlet/FFTcorrDK")
include("../Correlation Estimators/Dirichlet/FFTZPcorrDK")
include("../Correlation Estimators/Dirichlet/MScorrDK")
include("../Correlation Estimators/Dirichlet/NUFFTcorrDK-FINUFFT")
include("../Correlation Estimators/Dirichlet/NUFFTcorrDK-FGG")
include("../Correlation Estimators/Dirichlet/NUFFTcorrDK-KB")
include("../Monte Carlo Simulation Algorithms/GBM")
#include("../Correlation Estimators/Dirichlet/KANcorrDK")
#include("../Correlation Estimators/Dirichlet/NUFFTcorrDK-FT")
#include("../Correlation Estimators/Dirichlet/NUFFTcorrDK-NG")
#include("../Correlation Estimators/Dirichlet/NUFFTcorrDK-NKB")

#---------------------------------------------------------------------------
## Synchronous Case

mu = [0.01/86400, 0.01/86400]
sigma = [0.1/86400 sqrt(0.1/86400)*0.35*sqrt(0.2/86400);
        sqrt(0.1/86400)*0.35*sqrt(0.2/86400) 0.2/86400]

P = GBM(10000, mu, sigma, seed = 10)
t = reshape([collect(1:1:10000.0); collect(1:1:10000.0)], 10000, 2)

P = GBM(20000, mu, sigma, seed = 10)
t = reshape([collect(1:1:20000.0); collect(1:1:20000.0)], 20000, 2)

#--------------------

s1 = CFTcorrDK(P, t)
s2 = FFTcorrDK(P)
s3 = FFTZPcorrDK(P, t)
s4 = MScorrDK(P, t)
s5 = NUFFTcorrDKFINUFFT(P, t, 10^-12)
s6 = NUFFTcorrDKFGG(P, t)
s7 = NUFFTcorrDKKB(P, t)

# s3 = KANcorrDK(P[:,1], P[:,2], t[:,1], t[:,2])
# s4 = NUFFTcorrDKFT(P, t)
# # s5 = MScorrDK(P[:,1], P[:,2], t[:,1], t[:,2])
# s5 = MScorrDK(P, t)
# s6 = NUFFTcorrDKFINUFFT(P, t, 10^-12)
# s7 = NUFFTcorrDKFGG(P, t)
# s8 = NUFFTcorrDKNG(P, t)
# s9 = NUFFTcorrDKNKB(P, t)
# s10 = NUFFTcorrDKKB(P, t)

#---------------------------------------------------------------------------
## Asynchronous Case (Down-sampled 40%)

rm1 = sample(2:9999, 4000, replace = false)
rm2 = sample(2:9999, 4000, replace = false)

P[rm1, 1] .= NaN
t[rm1, 1] .= NaN
P[rm2, 2] .= NaN
t[rm2, 2] .= NaN

#--------------------
# Can't include FFTcorrDK

as1 = CFTcorrDK(P, t)
# as2 = FFTcorrDK(P)
as3 = FFTZPcorrDK(P, t)
as4 = MScorrDK(P, t)
as5 = NUFFTcorrDKFINUFFT(P, t, 10^-12)
as6 = NUFFTcorrDKFGG(P, t)
as7 = NUFFTcorrDKKB(P, t)

# as1 = CFTcorrDK(P, t)
# as2 = KANcorrDK(P[:,1], P[:,2], t[:,1], t[:,2])
# as3 = NUFFTcorrDKFT(P, t)
# as4 = MScorrDK(P[:,1], P[:,2], t[:,1], t[:,2])
# as5 = NUFFTcorrDKFINUFFT(P, t)
# as6 = NUFFTcorrDKFGG(P, t)
# as7 = NUFFTcorrDKNG(P, t)
# as8 = NUFFTcorrDKNKB(P, t)
# as9 = NUFFTcorrDKKB(P, t)


#---------------------------------------------------------------------------
## Asynchronous Case - Random Exponential

function rexp(n, mean)
    t = -mean .* log.(rand(n))
end


t1 = rexp(10000, 30)
t1 = cumsum(t1)
t1 = filter((x) -> x < 10000, t1)

t2 = rexp(10000, 30)
t2 = cumsum(t2)
t2 = filter((x) -> x < 10000, t2)

p1 = P[Int.(floor.(t1)), 1]
p2 = P[Int.(floor.(t2)), 2]

D = maximum([length(t1); length(t2)]) - minimum([length(t1); length(t2)])
if length(t1) < length(t2)
    t1 = [t1; repeat([NaN], D)]
    p1 = [p1; repeat([NaN], D)]
else
    t2 = [t2; repeat([NaN], D)]
    p2 = [p2; repeat([NaN], D)]
end

p = [p1 p2]
t = [t1 t2]

as1 = CFTcorrDK(p, t)
as2 = NUFFTcorrDKFGG(p, t)
as3 = FFTZPcorrDK(p, t)
